(load "parsecomb/parsecomb")
(import-all "parsecomb" "pc")

(define-parser spaces
  (pc:many (pc:skip (pc:space))))

(define-parser null "null"
  (pc:string "null"))

(define-parser boolean "bool"
  (pc:either (pc:string "true")
             (pc:string "false")))

(define-parser positive "pos"
  (pc:either
    (pc:seq* (pc:many1 (pc:digit))
             (pc:char #\.)
             (pc:many1 (pc:digit)))
    (pc:many1 (pc:digit))))

(define-parser negative "neg"
  (pc:seq* (pc:char #\-) positive))

(define-parser number
  (pc:either positive
             negative))

(define-parser single-quote
  (pc:skip (pc:char #\')))

(define-parser double-quote
  (pc:skip (pc:char #\")))

(define-parser str "string"
  (pc:either
    (pc:seq* double-quote (pc:many (pc:unless #\")) double-quote)
    (pc:seq* single-quote (pc:many (pc:unless #\')) single-quote)))

(define-parser object-pair "pair"
  (pc:seq*
    str
    spaces
    (pc:skip (pc:char #\:))
    spaces
    json-parser))

(define-parser comma
  (pc:seq*
    spaces
    (pc:char #\,)
    spaces))

(define-parser object "object"
  (pc:seq*
    (pc:skip (pc:char #\{))
    spaces
    (pc:sep-by object-pair comma)
    spaces
    (pc:skip (pc:char #\}))))

(define-parser array "array"
  (pc:seq*
    (pc:skip (pc:char #\[))
    spaces
    (pc:sep-by json-parser comma)
    spaces
    (pc:skip (pc:char #\]))))

(define-parser json-parser
  (pc:one-of
    number
    str
    boolean
    null
    object
    array))

(define (parse-json str)
  (pc:parse-all json-parser str))
